/*
 * Copyright (C) 2008/09  Bernhard Hobiger
 *
 * This file is part of HoDoKu.
 *
 * HoDoKu is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * HoDoKu is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with HoDoKu. If not, see <http://www.gnu.org/licenses/>.
 */

package sudoku;

import java.awt.EventQueue;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.JComponent;
import javax.swing.KeyStroke;

/**
 *
 * @author  Bernhard Hobiger
 */
public class GenerateSudokuProgressDialog extends javax.swing.JDialog implements Runnable {
    private Sudoku sudoku;
    private int anz;
    private Thread thread;
    private DifficultyLevel level;
    
    /** Creates new form GenerateSudokuProgressDialog */
    public GenerateSudokuProgressDialog(java.awt.Frame parent, boolean modal, DifficultyLevel level) {
        super(parent, modal);
        initComponents();
        getRootPane().setDefaultButton(cancelButton);
        KeyStroke escapeKeyStroke = KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0, false);
        Action escapeAction = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                setVisible( false );
            }
        };
        getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(escapeKeyStroke, "ESCAPE");
        getRootPane().getActionMap().put("ESCAPE", escapeAction);
        
        this.level = level;
        thread = new Thread(this);
        thread.start();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        progressLabel = new javax.swing.JLabel();
        cancelButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("intl/GenerateSudokuProgressDialog"); // NOI18N
        setTitle(bundle.getString("GenerateSudokuProgressDialog.title")); // NOI18N
        setLocationByPlatform(true);
        setModal(true);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        progressLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        progressLabel.setText("0"); // NOI18N

        cancelButton.setMnemonic(java.util.ResourceBundle.getBundle("intl/GenerateSudokuProgressDialog").getString("GenerateSudokuProgressDialog.cancelButton.mnemonic").charAt(0));
        cancelButton.setText(bundle.getString("GenerateSudokuProgressDialog.cancelButton.text")); // NOI18N
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(progressLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(66, 66, 66)
                        .addComponent(cancelButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(21, Short.MAX_VALUE)
                .addComponent(progressLabel)
                .addGap(19, 19, 19)
                .addComponent(cancelButton)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        thread.interrupt();
        try {
            thread.join();
        } catch (InterruptedException ex) {
            Logger.getLogger(getClass().getName()).log(Level.SEVERE, "Interrupted while waiting for generation thread", ex);
        }
        sudoku = null;
        setVisible(false);
    }//GEN-LAST:event_cancelButtonActionPerformed
    
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        cancelButtonActionPerformed(null);
    }//GEN-LAST:event_formWindowClosing
    
    @Override
    public void run() {
        SudokuCreator creator = new SudokuCreator();
        SudokuSolver solver = SudokuSolver.getInstance();
        while (! thread.isInterrupted()) {
            sudoku = creator.generateSudoku(level, true);
            Sudoku solvedSudoku = sudoku.clone();
            boolean ok = solver.solve(level, solvedSudoku, true, null);
            if (ok && solvedSudoku.getLevel().getOrdinal() == level.getOrdinal()) {
                sudoku.setLevel(solvedSudoku.getLevel());
                sudoku.setScore(solvedSudoku.getScore());
                break;
            }
            setAnz(getAnz() + 1);
            EventQueue.invokeLater(new Runnable() {
                @Override
                public void run() {
                    progressLabel.setText(Integer.toString(getAnz()));
                }
            });
//            if (getAnz() >= 1) {
//                break;
//            }
        }
        EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                setVisible(false);
            }
        });
    }
    
    public Sudoku getSudoku() {
        return sudoku;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new GenerateSudokuProgressDialog(new javax.swing.JFrame(), true, Options.getInstance().getDifficultyLevels()[DifficultyType.EASY.ordinal()]).setVisible(true);
            }
        });
    }
    
    private synchronized int getAnz() {
        return anz;
    }
    
    private synchronized void setAnz(int anz) {
        this.anz = anz;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JLabel progressLabel;
    // End of variables declaration//GEN-END:variables
    
}
